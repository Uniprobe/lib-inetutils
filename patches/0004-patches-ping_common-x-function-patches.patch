From 698665e5f11b6f3e8457990782850f95fe3f1a69 Mon Sep 17 00:00:00 2001
From: Ethan Cotterell <ethancotterell@gmail.com>
Date: Thu, 20 May 2021 23:23:13 +0100
Subject: [PATCH 04/14] patches: ping_common x function patches

---
 ping/ping_common.c | 41 ++++++++++++++++++++++-------------------
 1 file changed, 22 insertions(+), 19 deletions(-)

diff --git a/ping/ping_common.c b/ping/ping_common.c
index ce074519..f6c02ac3 100644
--- a/ping/ping_common.c
+++ b/ping/ping_common.c
@@ -30,10 +30,8 @@
 #include <netinet/in.h>
 #include <arpa/inet.h>
 #include <netdb.h>
-#include <xalloc.h>
-#include <unused-parameter.h>
 
-#include "ping_common.h"
+#include <ping_common.h>
 
 extern unsigned char *data_buffer;
 extern size_t data_length;
@@ -48,14 +46,18 @@ ping_cvt_number (const char *optarg, size_t maxval, int allow_zero)
   unsigned long int n;
 
   n = strtoul (optarg, &p, 0);
-  if (*p)
-    error (EXIT_FAILURE, 0, "invalid value (`%s' near `%s')", optarg, p);
+  if (*p) {
+    fprintf(stderr, "invalid value ('%s' near '%s')\n", optarg, p);
+    exit(1);
+  }
 
-  if (n == 0 && !allow_zero)
-    error (EXIT_FAILURE, 0, "option value too small: %s", optarg);
+  if (n == 0 && !allow_zero) {
+    fprintf(stderr, "option value too small: %s\n", optarg);
+  }
 
-  if (maxval && n > maxval)
-    error (EXIT_FAILURE, 0, "option value too big: %s", optarg);
+  if (maxval && n > maxval) {
+    fprintf(stderr, "option value too big: %s\n", optarg);
+  }
 
   return n;
 }
@@ -69,7 +71,7 @@ init_data_buffer (unsigned char * pat, size_t len)
   if (data_length == 0)
     return;
 
-  data_buffer = xmalloc (data_length);
+  data_buffer = malloc (data_length);
 
   if (pat)
     {
@@ -95,8 +97,9 @@ decode_pattern (const char *text, int *pattern_len,
 
   for (i = 0; *text && i < *pattern_len; i++)
     {
-      if (sscanf (text, "%2x%n", &c, &off) != 1)
-        error (EXIT_FAILURE, 0, "error in pattern near %s", text);
+      if (sscanf (text, "%2x%n", &c, &off) != 1) {
+        fprintf(stderr, "error in pattern near %s\n", text);
+      }
 
       text += off;
       pattern_data[i] = c;
@@ -276,11 +279,11 @@ ipaddr2str (struct sockaddr *from, socklen_t fromlen)
 	errmsg = gai_strerror (err);
 
       fprintf (stderr, "ping: getnameinfo: %s\n", errmsg);
-      return xstrdup ("unknown");
+      return strdup ("unknown");
     }
 
   if (options & OPT_NUMERIC)
-    return xstrdup (ipstr);
+    return strdup (ipstr);
 
   err = getnameinfo (from, fromlen, hoststr, sizeof (hoststr),
 		     NULL, 0,
@@ -291,11 +294,11 @@ ipaddr2str (struct sockaddr *from, socklen_t fromlen)
 #endif
 		     );
   if (err)
-    return xstrdup (ipstr);
+    return strdup (ipstr);
 
   len = strlen (ipstr) + strlen (hoststr) + 4;	/* Pair of parentheses, a space
 						   and a NUL. */
-  buf = xmalloc (len);
+  buf = malloc (len);
   snprintf (buf, len, "%s (%s)", hoststr, ipstr);
 
   return buf;
@@ -307,11 +310,11 @@ sinaddr2str (struct in_addr ina)
   struct hostent *hp;
 
   if (options & OPT_NUMERIC)
-    return xstrdup (inet_ntoa (ina));
+    return strdup (inet_ntoa (ina));
 
   hp = gethostbyaddr ((char *) &ina, sizeof (ina), AF_INET);
   if (hp == NULL)
-    return xstrdup (inet_ntoa (ina));
+    return strdup (inet_ntoa (ina));
   else
     {
       char *buf, *ipstr;
@@ -323,7 +326,7 @@ sinaddr2str (struct in_addr ina)
       if (hp->h_name)
 	len += strlen (hp->h_name) + 4;	/* parentheses, space, and NUL */
 
-      buf = xmalloc (len);
+      buf = malloc (len);
       if (hp->h_name)
 	snprintf (buf, len, "%s (%s)", hp->h_name, ipstr);
       else
-- 
2.25.1

