From 592d684ebd4c783bf0bcef14a7ffa153baabcc9b Mon Sep 17 00:00:00 2001
From: Ethan Cotterell <e.cotterell@ancaster.ac.uk>
Date: Thu, 1 Jul 2021 13:54:17 +0100
Subject: [PATCH 15/15] ping: added ukstore support

Supported metrics are latest, minimum and maximum response times
(in nanoseconds).
---
 ping/libping.c   | 18 +++++++++++++++++
 ping/ping.h      | 15 +++++++++++++++
 ping/ping_echo.c | 50 ++++++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 83 insertions(+)

diff --git a/ping/libping.c b/ping/libping.c
index 9ce69fc2..0d789aea 100644
--- a/ping/libping.c
+++ b/ping/libping.c
@@ -45,6 +45,24 @@ static int useless_ident = 0;	/* Relevant at least for Linux.  */
 
 static size_t _ping_packetsize (PING * p);
 
+#ifdef CONFIG_INETUTILS_UKSTORE_SUPPORT
+/*** ukstore functions ***/
+int latest_getter(void *n, __s64 *dst) {
+  *dst = latest_ping_time;
+  return 0;
+}
+
+int min_getter(void *n, __s64 *dst) {
+  *dst = minimum_ping_time;
+  return 0;
+}
+
+int max_getter(void *n, __s64 *dst) {
+  *dst = maximum_ping_time;
+  return 0;
+}
+#endif
+
 size_t
 _ping_packetsize (PING * p)
 {
diff --git a/ping/ping.h b/ping/ping.h
index 87cdfca9..4792858a 100644
--- a/ping/ping.h
+++ b/ping/ping.h
@@ -21,6 +21,21 @@
 
 #define USE_IPV6 0
 
+#ifdef CONFIG_INETUTILS_UKSTORE_SUPPORT
+extern int64_t minimum_ping_time;
+extern int64_t maximum_ping_time;
+extern int64_t latest_ping_time;
+
+int latest_getter(void *n, __s64 *dst);
+int min_getter(void *n, __s64 *dst);
+int max_getter(void *n, __s64 *dst);
+
+# include <uk/store.h>
+UK_STORE_STATIC_ENTRY(ping_latest, s64, latest_getter, NULL);
+UK_STORE_STATIC_ENTRY(ping_minimum, s64, min_getter, NULL);
+UK_STORE_STATIC_ENTRY(ping_maximum, s64, max_getter, NULL);
+#endif
+
 PING *ping_init (int type, int ident);
 void ping_reset (PING * p);
 void ping_set_type (PING * p, int type);
diff --git a/ping/ping_echo.c b/ping/ping_echo.c
index b3380484..591b5b97 100644
--- a/ping/ping_echo.c
+++ b/ping/ping_echo.c
@@ -48,6 +48,10 @@
 #include <ping.h>
 #include "ping_impl.h"
 
+#ifdef CONFIG_INETUTILS_UKSTORE_SUPPORT_DEBUG
+# include <uk/store.h>
+#endif
+
 #define NROUTES		9	/* number of record route slots */
 #ifndef MAX_IPOPTLEN
 # define MAX_IPOPTLEN 40
@@ -67,6 +71,12 @@ void print_icmp_header (struct sockaddr_in *from,
 			struct ip_hdr *ip, icmphdr_t * icmp, int len);
 static void print_ip_opt (struct ip_hdr *ip, int hlen);
 
+#ifdef CONFIG_INETUTILS_UKSTORE_SUPPORT
+int64_t minimum_ping_time = -1;
+int64_t maximum_ping_time = -1;
+int64_t latest_ping_time = -1;
+#endif
+
 int
 ping_echo (char *hostname)
 {
@@ -192,6 +202,9 @@ print_echo (int dupflag, struct ping_stat *ping_stat,
   struct timeval tv;
   int timing = 0;
   double triptime = 0.0;
+#ifdef CONFIG_INETUTILS_UKSTORE_SUPPORT
+	int64_t triptime_ns;
+#endif
 
   gettimeofday (&tv, NULL);
 
@@ -237,6 +250,20 @@ print_echo (int dupflag, struct ping_stat *ping_stat,
 	  inet_ntoa (*(struct in_addr *) &from->sin_addr.s_addr),
 	  ntohs (icmp->icmp_seq));
   printf (" ttl=%d", ip->_ttl);
+
+#ifdef CONFIG_INETUTILS_UKSTORE_SUPPORT
+	triptime_ns = triptime * 1000 * 1000;
+	if (minimum_ping_time == -1 || triptime_ns < minimum_ping_time) {
+		// fprintf(stderr, "DEBUG: updating the minimum ping time to %ld ns\n", triptime_ns);
+		minimum_ping_time = triptime_ns;
+	}
+	if (maximum_ping_time == -1 || maximum_ping_time < triptime_ns) {
+		// fprintf(stderr, "DEBUG: updating the maximum ping time to %ld ns\n", triptime_ns);
+		maximum_ping_time = triptime_ns;
+	}
+	latest_ping_time = triptime_ns;
+#endif
+
   if (timing)
     printf (" time=%.3f ms", triptime);
   if (dupflag)
@@ -656,6 +683,29 @@ echo_finish (void)
 
       printf ("round-trip min/avg/max/stddev = %.3f/%.3f/%.3f/%.3f ms\n",
 	      ping_stat->tmin, avg, ping_stat->tmax, nsqrt (vari, 0.0005));
+#ifdef CONFIG_INETUTILS_UKSTORE_SUPPORT_DEBUG
+		    int ukret;
+		    int64_t storage;
+		    struct uk_store_entry *my_entry;
+
+		    fprintf(stderr, "DEBUG: getting the minimum ping from ukstore\n");
+		    my_entry = uk_store_get_entry(libinetutils, NULL, "ping_minimum");
+		    fprintf(stderr, "DEBUG: attempting to use uk_store_get_value(%p, ...)\n", my_entry);
+		    ukret = uk_store_get_value(my_entry, s64, &storage);
+		    if (ukret == 0)
+		      fprintf(stderr, "DEBUG: used ukstore to get minimum latency entry => %"PRId64"\n", storage);
+		    else
+		      fprintf(stderr, "DEBUG: ukstore returned non-zero code (%d). failed\n", ukret);
+
+		    fprintf(stderr, "DEBUG: getting the maximum ping from ukstore\n");
+		    my_entry = uk_store_get_entry(libinetutils, NULL, "ping_maximum");
+		    fprintf(stderr, "DEBUG: attempting to use uk_store_get_value(%p, ...)\n", my_entry);
+		    ukret = uk_store_get_value(my_entry, s64, &storage);
+		    if (ukret == 0)
+		      fprintf(stderr, "DEBUG: used ukstore to get maximum latency entry => %"PRId64"\n", storage);
+		    else
+		      fprintf(stderr, "DEBUG: ukstore returned non-zero code (%d). failed\n", ukret);
+#endif
     }
   return (ping->ping_num_recv == 0);
 }
-- 
2.25.1

